#!/usr/local/bin/python3
#
# find_luddy.py : a simple maze solver
#
# Submitted by : [PUT YOUR NAME AND USERNAME HERE]
#
# Based on skeleton code by Z. Kachwala, 2019
#

import sys
import json
path = list()
# Parse the map from a given filename
def parse_map(filename):
	with open(filename, "r") as f:
		return [[char for char in line] for line in f.read().rstrip().split("\n")]

# Check if a row,col index pair is on the map
def valid_index(pos, n, m, visited):
	return 0 <= pos[0] < n  and 0 <= pos[1] < m and pos not in visited

# Find the possible moves from position (row, col)
def moves(map, row, col, visited):
	moves=((row+1,col), (row-1,col), (row,col-1), (row,col+1))

    # Return only moves that are within the board and legal (i.e. on the sidewalk ".")
	return [ move for move in moves if valid_index(move, len(map), len(map[0]), visited) and (map[move[0]][move[1]] in ".@" ) ]

def currpath(curr_path, curr_move, you_loc):
	if curr_path is None:
		curr_path = [you_loc]
		return curr_path

	if curr_move not in curr_path:

		if curr_path[len(curr_path)-1][0] == curr_move[0]:
			if curr_path[len(curr_path)-1][1] == curr_move[1] - 1 or curr_path[len(curr_path)-1][1] == curr_move[1] + 1:
				curr_path.append(curr_move)

				return curr_path
			else:
				
				curr_path.remove(curr_path[len(curr_path) - 1])
				currpath(curr_path, curr_move, you_loc)
		if curr_path[len(curr_path)-1][1] == curr_move[1]:
			if curr_path[len(curr_path)-1][0] == curr_move[0] - 1 or curr_path[len(curr_path)-1][0] == curr_move[0] + 1:
				curr_path.append(curr_move)

				return curr_path
			else:
				curr_path.remove(curr_path[len(curr_path) - 1])
				currpath(curr_path, curr_move, you_loc)
		else:
			curr_path.remove(curr_path[len(curr_path)-1])
			currpath(curr_path, curr_move, you_loc)
	return curr_path
def directions(curr_path, curr_dist):
	global path
	for i in range(-1, curr_dist+1):
		if curr_path[i+1][0]-curr_path[i][0] == 0:
			if curr_path[i+1][1]-curr_path[i][1] == 1:
				path.extend('E')
			if curr_path[i + 1][1] - curr_path[i][1] == -1:
				path.extend('W')
		if curr_path[i+1][1]-curr_path[i][1] == 0:
			if curr_path[i+1][0]-curr_path[i][0] == 1:
				path.extend('S')
			if curr_path[i + 1][0] - curr_path[i][0] == -1:
				path.extend('N')

	return path
# Perform search on the map
def search1(IUB_map):
	# Find my start position
	global path
	you_loc=[(row_i,col_i) for col_i in range(len(IUB_map[0])) for row_i in range(len(IUB_map)) if IUB_map[row_i][col_i]=="#"][0]
	curr_path1 = [you_loc]
	fringe=[(you_loc,0, curr_path1)]; visited = [];
	while len(fringe) >0:
		(curr_move, curr_dist, curr_path)=fringe.pop()

		for move in moves(IUB_map, *curr_move, visited):

			if IUB_map[move[0]][move[1]]=="@":
				curr_path=currpath(curr_path,curr_move, you_loc)
				curr_path = currpath(curr_path, move, you_loc)


				path = directions(curr_path, curr_dist)

				return curr_dist+1
			else: visited.extend([curr_move]), fringe.append((move, curr_dist + 1, currpath(curr_path, curr_move, you_loc)))
	return 'Inf'


# Main Function
if __name__ == "__main__":
	IUB_map=parse_map(sys.argv[1])
	print("Shhhh... quiet while I navigate!")
	solution = search1(IUB_map)
	print("Here's the solution I found:")
	print(solution, ''.join(path))
